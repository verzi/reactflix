{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar api = 'https://api.themoviedb.org/3';\nvar key = '024d69b581633d457ac58359146c43f6';\nvar defaultContent = {\n  api_key: key,\n  language: 'en-US'\n};\n\nfunction queryString(obj) {\n  return Object.entries(obj).map(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        index = _ref2[0],\n        val = _ref2[1];\n\n    return index + \"=\" + val;\n  }).join('&');\n}\n\nexport default function request(url) {\n  var content,\n      debug,\n      obj,\n      response,\n      data,\n      _args = arguments;\n  return _regeneratorRuntime.async(function request$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          content = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n          debug = _args.length > 2 && _args[2] !== undefined ? _args[2] : false;\n          obj = _objectSpread(_objectSpread({}, defaultContent), content);\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(fetch(api + \"/\" + url + \"?\" + queryString(obj)));\n\n        case 5:\n          response = _context.sent;\n          _context.next = 8;\n          return _regeneratorRuntime.awrap(debug ? response.status : response.json());\n\n        case 8:\n          data = _context.sent;\n          return _context.abrupt(\"return\", data);\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["C:/distribuidas/apps/sarasapp/app/services/api.js"],"names":["api","key","defaultContent","api_key","language","queryString","obj","Object","entries","map","index","val","join","request","url","content","debug","fetch","response","status","json","data"],"mappings":";;;;;;;;AAAA,IAAMA,GAAG,GAAG,8BAAZ;AAGA,IAAMC,GAAG,GAAG,kCAAZ;AAEA,IAAMC,cAAc,GAAG;AACrBC,EAAAA,OAAO,EAAEF,GADY;AAErBG,EAAAA,QAAQ,EAAE;AAFW,CAAvB;;AAKA,SAASC,WAAT,CAAqBC,GAArB,EAA0B;AACxB,SAAOC,MAAM,CAACC,OAAP,CAAeF,GAAf,EACJG,GADI,CACA;AAAA;AAAA,QAAEC,KAAF;AAAA,QAASC,GAAT;;AAAA,WAAqBD,KAArB,SAA8BC,GAA9B;AAAA,GADA,EAEJC,IAFI,CAEC,GAFD,CAAP;AAGD;;AAED,eAAe,SAAeC,OAAf,CAAuBC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4BC,UAAAA,OAA5B,2DAAsC,EAAtC;AAA0CC,UAAAA,KAA1C,2DAAkD,KAAlD;AACPV,UAAAA,GADO,mCACIJ,cADJ,GACuBa,OADvB;AAAA;AAAA,2CAGUE,KAAK,CAAIjB,GAAJ,SAAWc,GAAX,SAAkBT,WAAW,CAACC,GAAD,CAA7B,CAHf;;AAAA;AAGPY,UAAAA,QAHO;AAAA;AAAA,2CAIOF,KAAK,GAAGE,QAAQ,CAACC,MAAZ,GAAqBD,QAAQ,CAACE,IAAT,EAJjC;;AAAA;AAIPC,UAAAA,IAJO;AAAA,2CAMNA,IANM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["const api = 'https://api.themoviedb.org/3';\n\n// The api key is ok to be exposed, it's free and only for self study. I know that the corretly way is to store in a .env file.\nconst key = '024d69b581633d457ac58359146c43f6';\n\nconst defaultContent = {\n  api_key: key,\n  language: 'en-US'\n};\n\nfunction queryString(obj) {\n  return Object.entries(obj)\n    .map(([index, val]) => `${index}=${val}`)\n    .join('&');\n}\n\nexport default async function request(url, content = {}, debug = false) {\n  const obj = { ...defaultContent, ...content };\n\n  const response = await fetch(`${api}/${url}?${queryString(obj)}`);\n  const data = await (debug ? response.status : response.json());\n\n  return data;\n}\n"]},"metadata":{},"sourceType":"module"}