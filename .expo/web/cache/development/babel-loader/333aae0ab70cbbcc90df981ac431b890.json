{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\distribuidas\\\\apps\\\\sarasapp\\\\node_modules\\\\react-native-scalable-image\\\\index.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nvar resolveAssetSource = Image.resolveAssetSource;\n\nvar ScalableImage = function ScalableImage(props) {\n  var ImageComponent = props.background ? ImageBackground : Image;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      scalableWidth = _useState2[0],\n      setScalableWidth = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      scalableHeight = _useState4[0],\n      setScalableHeight = _useState4[1];\n\n  var _useState5 = useState(React.createElement(ImageComponent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 40\n    }\n  })),\n      _useState6 = _slicedToArray(_useState5, 2),\n      image = _useState6[0],\n      setImage = _useState6[1];\n\n  var mounted = useRef(false);\n  useEffect(function () {\n    mounted.current = true;\n    return function () {\n      mounted.current = false;\n    };\n  }, []);\n  useEffect(function () {\n    onProps(props);\n  });\n  useEffect(function () {\n    setImage(React.createElement(ImageComponent, _extends({}, props, {\n      style: [props.style, {\n        width: scalableWidth,\n        height: scalableHeight\n      }],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }\n    })));\n  }, [props, scalableHeight, scalableWidth]);\n\n  var onProps = function onProps(localProps) {\n    var source = localProps.source;\n\n    if (source.uri) {\n      var sourceToUse = source.uri ? source.uri : source;\n      Image.getSize(sourceToUse, function (width, height) {\n        return adjustSize(width, height, props);\n      }, console.err);\n    } else {\n      var _sourceToUse = resolveAssetSource(source);\n\n      adjustSize(_sourceToUse.width, _sourceToUse.height, props);\n    }\n  };\n\n  var adjustSize = function adjustSize(sourceWidth, sourceHeight, localProps) {\n    var width = localProps.width,\n        height = localProps.height;\n    var ratio = 1;\n\n    if (width && height) {\n      ratio = Math.min(width / sourceWidth, height / sourceHeight);\n    } else if (width) {\n      ratio = width / sourceWidth;\n    } else if (height) {\n      ratio = height / sourceHeight;\n    }\n\n    if (mounted.current) {\n      var computedWidth = sourceWidth * ratio;\n      var computedHeight = sourceHeight * ratio;\n      setScalableWidth(computedWidth);\n      setScalableHeight(computedHeight);\n      props.onSize({\n        width: computedWidth,\n        height: computedHeight\n      });\n    }\n  };\n\n  if (!props.onPress) {\n    return image;\n  } else {\n    return React.createElement(TouchableOpacity, {\n      onPress: props.onPress,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }\n    }, image);\n  }\n};\n\nScalableImage.propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number,\n  onPress: PropTypes.func,\n  onSize: PropTypes.func,\n  background: PropTypes.bool\n};\nScalableImage.defaultProps = {\n  background: false,\n  onSize: function onSize(size) {}\n};\nexport default ScalableImage;","map":{"version":3,"sources":["C:/distribuidas/apps/sarasapp/node_modules/react-native-scalable-image/index.js"],"names":["React","useState","useEffect","useRef","PropTypes","resolveAssetSource","Image","ScalableImage","props","ImageComponent","background","ImageBackground","scalableWidth","setScalableWidth","scalableHeight","setScalableHeight","image","setImage","mounted","current","onProps","style","width","height","localProps","source","uri","sourceToUse","getSize","adjustSize","console","err","sourceWidth","sourceHeight","ratio","Math","min","computedWidth","computedHeight","onSize","onPress","propTypes","number","func","bool","defaultProps","size"],"mappings":"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","sourcesContent":["import React, {\n    useState,\n    useEffect,\n    useRef\n} from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport {\n    Image,\n    TouchableOpacity,\n    ImageBackground\n} from 'react-native';\n\nconst resolveAssetSource = Image.resolveAssetSource;\n\nconst ScalableImage = props => {\n    const ImageComponent = props.background\n        ? ImageBackground\n        : Image;\n\n    const [scalableWidth, setScalableWidth] = useState(null);\n    const [scalableHeight, setScalableHeight] = useState(null);\n    const [image, setImage] = useState(<ImageComponent />);\n    const mounted = useRef(false);\n\n    useEffect(() => {\n        mounted.current = true;\n\n        return () => {\n            mounted.current = false;\n        }\n    }, []);\n\n    useEffect(() => {\n        onProps(props);\n    });\n\n    useEffect(() => {\n        setImage(\n            <ImageComponent\n                {...props}\n                style={[props.style, {\n                    width: scalableWidth,\n                    height: scalableHeight\n                }]}\n            />\n        );\n    }, [props, scalableHeight, scalableWidth]);\n\n    const onProps = localProps => {\n        const { source } = localProps;\n        if (source.uri) {\n            const sourceToUse = source.uri\n                ? source.uri\n                : source;\n\n            Image.getSize(\n                sourceToUse,\n                (width, height) => adjustSize(width, height, props),\n                console.err\n            );\n        }\n        else {\n            const sourceToUse = resolveAssetSource(source);\n            adjustSize(sourceToUse.width, sourceToUse.height, props);\n        }\n    };\n\n    const adjustSize = (sourceWidth, sourceHeight, localProps) => {\n        const { width, height } = localProps;\n\n        let ratio = 1;\n\n        if (width && height) {\n            ratio = Math.min(width / sourceWidth, height / sourceHeight);\n        }\n        else if (width) {\n            ratio = width / sourceWidth;\n        }\n        else if (height) {\n            ratio = height / sourceHeight;\n        }\n\n        if (mounted.current) {\n            const computedWidth = sourceWidth * ratio;\n            const computedHeight = sourceHeight * ratio;\n\n            setScalableWidth(computedWidth);\n            setScalableHeight(computedHeight);\n\n            props.onSize({ width: computedWidth, height: computedHeight });\n        }\n    };\n\n    if (!props.onPress) {\n        return image;\n    }\n    else {\n        return (\n            <TouchableOpacity onPress={props.onPress}>\n                {image}\n            </TouchableOpacity>\n        );\n    }\n};\n\nScalableImage.propTypes = {\n    width: PropTypes.number,\n    height: PropTypes.number,\n    onPress: PropTypes.func,\n    onSize: PropTypes.func,\n    background: PropTypes.bool,\n};\n\nScalableImage.defaultProps = {\n    background: false,\n    onSize: size => {}\n};\n\nexport default ScalableImage;\n"]},"metadata":{},"sourceType":"module"}